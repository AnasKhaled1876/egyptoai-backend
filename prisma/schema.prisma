generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(uuid()) @db.Uuid
  email              String              @unique
  name               String?
  password           String?             @map("hashed_password")
  salt               String?
  photoUrl           String?             @map("photo_url")
  provider           String?             @default("email")
  role               UserRole            @default(USER)
  emailVerified      Boolean             @default(false) @map("email_verified")
  lastLoginAt        DateTime?           @map("last_login_at") @db.Timestamptz(6)
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)
  providerId         String?             @unique @map("provider_id")
  chats              Chat[]
  fcmTokens          FCMToken[]
  verificationTokens VerificationToken[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(uuid()) @db.Uuid
  token      String   @unique
  type       String
  identifier String
  expiresAt  DateTime @map("expires_at") @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  userId     String   @map("user_id") @db.Uuid
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@map("verification_tokens")
}

model FCMToken {
  id         String   @id @default(uuid()) @db.Uuid
  token      String   @unique
  deviceInfo String?  @map("device_info")
  userId     String   @map("user_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token], name: "user_fcm_tokens_user_id_token_key")
  @@map("fcm_tokens")
}

model Chat {
  id        String        @id @default(uuid()) @db.Uuid
  title     String?
  userId    String        @map("user_id") @db.Uuid
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  messages  ChatMessage[]
  user      User          @relation(fields: [userId], references: [id])

  @@map("chats")
}

model ChatMessage {
  id        String   @id @default(uuid()) @db.Uuid
  prompt    String
  reply     String
  chatId    String   @map("chat_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@map("chat_messages")
}

model QuickPrompt {
  id        String   @id @default(uuid()) @db.Uuid
  emoji     String   @default("")
  text      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("quick_prompts")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}
